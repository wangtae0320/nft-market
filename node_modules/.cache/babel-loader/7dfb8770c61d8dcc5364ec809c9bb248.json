{"ast":null,"code":"var _jsxFileName = \"/Users/mina/Desktop/gradient_animated_site/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from 'react';\nimport BodyContent from './components/BodyContent';\nimport MainArea from './components/MainArea';\nimport { ethers } from 'ethers';\nimport web3 from './connection/web3';\nimport Web3Context from './store/web3-context';\nimport CollectionContext from './store/collection-context';\nimport { fundingAddress } from './constants/address';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst contractABI = require('./abis/Funding.json'); // import MyNFT from './Abis/MyNFT'\n// import MADTOKEN from './Abis/MADTOKEN'\n// const MyNFT = require('./Abis/MyNFT.json')\n\n\nconst App = () => {\n  _s();\n\n  const web3Ctx = useContext(Web3Context);\n  const collectionCtx = useContext(CollectionContext);\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const myContract = new ethers.Contract(MADTOKEN_ADDRESS, contractABI.abi, provider);\n  console.log(myContract.address); //내가 만든 Contract 추가\n  // const fundingCtx = useContext(FundingContext)\n\n  useEffect(() => {\n    // Check if the user has Metamask active\n    if (!web3) {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n      return;\n    } // Function to fetch all the blockchain data\n\n\n    const loadBlockchainData = async () => {\n      // Request accounts acccess if needed\n      try {\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n      } catch (error) {\n        console.error(error);\n      } // Load account\n\n\n      const accounts = await web3Ctx.loadAccount(web3); // Load Network ID\n\n      const networkId = await web3Ctx.loadNetworkId(web3);\n      console.log('accounts!!' + accounts);\n      console.log('network ID!!' + networkId); // const collectionContract = collectionCtx.loadContract(\n      //   web3,\n      //   contractABI.abi,\n      //   fundingAddress,\n      // )\n      // console.log(collectionContract)\n      // //mint 버튼이 떠야함 -> main.js에서 MintForm이 떠야하는데 그러려면 아래 작업을 해주어야함\n      // if (collectionContract) {\n      //   console.log('Collection contract deployed to ropsten detwork')\n      //   console.log('collectionContract address', collectionContract) //address 어떻게 찍나?\n      //   let totalSupply = await collectionCtx.loadTotalSupply(\n      //     collectionContract,\n      //   )\n      //   collectionCtx.setNftIsLoading(false) // 이렇게 호출하는게 맞나?\n      //   collectionCtx.loadCollection(collectionContract, totalSupply)\n      // } else {\n      //   window.alert(\n      //     'NFTMarketplace contract not deployed to detected network.',\n      //   )\n      // }\n      // // Metamask Event Subscription - Account changed\n      // window.ethereum.on('accountsChanged', (accounts) => {\n      //   web3Ctx.loadAccount(web3)\n      // })\n      // // Metamask Event Subscription - Network changed\n      // window.ethereum.on('chainChanged', (networkId) => {\n      //   window.location.reload()\n      // })\n    };\n\n    loadBlockchainData();\n  }, []);\n  const showContent = web3 && collectionCtx.contract && web3Ctx.account;\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [showContent && /*#__PURE__*/_jsxDEV(MainArea, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(BodyContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"KTV223dRPacKKrWZxoqbed8ewCo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/mina/Desktop/gradient_animated_site/src/App.js"],"names":["React","useContext","useEffect","BodyContent","MainArea","ethers","web3","Web3Context","CollectionContext","fundingAddress","contractABI","require","App","web3Ctx","collectionCtx","provider","providers","Web3Provider","window","ethereum","myContract","Contract","MADTOKEN_ADDRESS","abi","console","log","address","alert","loadBlockchainData","request","method","error","accounts","loadAccount","networkId","loadNetworkId","showContent","contract","account"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AAEA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AAEA,SAASC,cAAT,QAA+B,qBAA/B;;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,qBAAD,CAA3B,C,CACA;AACA;AACA;;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAMC,OAAO,GAAGZ,UAAU,CAACM,WAAD,CAA1B;AACA,QAAMO,aAAa,GAAGb,UAAU,CAACO,iBAAD,CAAhC;AAEA,QAAMO,QAAQ,GAAG,IAAIV,MAAM,CAACW,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,QAAMC,UAAU,GAAG,IAAIf,MAAM,CAACgB,QAAX,CACjBC,gBADiB,EAEjBZ,WAAW,CAACa,GAFK,EAGjBR,QAHiB,CAAnB;AAMAS,EAAAA,OAAO,CAACC,GAAR,CAAYL,UAAU,CAACM,OAAvB,EAXgB,CAahB;AACA;;AACAxB,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAI,CAACI,IAAL,EAAW;AACTY,MAAAA,MAAM,CAACS,KAAP,CACE,qEADF;AAGA;AACD,KAPa,CASd;;;AACA,UAAMC,kBAAkB,GAAG,YAAY;AACrC;AACA,UAAI;AACF,cAAMV,MAAM,CAACC,QAAP,CAAgBU,OAAhB,CAAwB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAxB,CAAN;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc;AACdP,QAAAA,OAAO,CAACO,KAAR,CAAcA,KAAd;AACD,OANoC,CAQrC;;;AACA,YAAMC,QAAQ,GAAG,MAAMnB,OAAO,CAACoB,WAAR,CAAoB3B,IAApB,CAAvB,CATqC,CAUrC;;AACA,YAAM4B,SAAS,GAAG,MAAMrB,OAAO,CAACsB,aAAR,CAAsB7B,IAAtB,CAAxB;AACAkB,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAeO,QAA3B;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBS,SAA7B,EAbqC,CAerC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACD,KA/CD;;AAiDAN,IAAAA,kBAAkB;AACnB,GA5DQ,EA4DN,EA5DM,CAAT;AA6DA,QAAMQ,WAAW,GAAG9B,IAAI,IAAIQ,aAAa,CAACuB,QAAtB,IAAkCxB,OAAO,CAACyB,OAA9D;AAEA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,eACGF,WAAW,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YADlB,eAEE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CApFD;;GAAMxB,G;;KAAAA,G;AAsFN,eAAeA,GAAf","sourcesContent":["import React, { useContext, useEffect } from 'react'\n\nimport BodyContent from './components/BodyContent'\nimport MainArea from './components/MainArea'\nimport { ethers } from 'ethers'\n\nimport web3 from './connection/web3'\nimport Web3Context from './store/web3-context'\nimport CollectionContext from './store/collection-context'\n\nimport { fundingAddress } from './constants/address'\nconst contractABI = require('./abis/Funding.json')\n// import MyNFT from './Abis/MyNFT'\n// import MADTOKEN from './Abis/MADTOKEN'\n// const MyNFT = require('./Abis/MyNFT.json')\nconst App = () => {\n  const web3Ctx = useContext(Web3Context)\n  const collectionCtx = useContext(CollectionContext)\n\n  const provider = new ethers.providers.Web3Provider(window.ethereum)\n  const myContract = new ethers.Contract(\n    MADTOKEN_ADDRESS,\n    contractABI.abi,\n    provider,\n  )\n\n  console.log(myContract.address)\n\n  //내가 만든 Contract 추가\n  // const fundingCtx = useContext(FundingContext)\n  useEffect(() => {\n    // Check if the user has Metamask active\n    if (!web3) {\n      window.alert(\n        'Non-Ethereum browser detected. You should consider trying MetaMask!',\n      )\n      return\n    }\n\n    // Function to fetch all the blockchain data\n    const loadBlockchainData = async () => {\n      // Request accounts acccess if needed\n      try {\n        await window.ethereum.request({ method: 'eth_requestAccounts' })\n      } catch (error) {\n        console.error(error)\n      }\n\n      // Load account\n      const accounts = await web3Ctx.loadAccount(web3)\n      // Load Network ID\n      const networkId = await web3Ctx.loadNetworkId(web3)\n      console.log('accounts!!' + accounts)\n      console.log('network ID!!' + networkId)\n\n      // const collectionContract = collectionCtx.loadContract(\n      //   web3,\n      //   contractABI.abi,\n      //   fundingAddress,\n      // )\n      // console.log(collectionContract)\n\n      // //mint 버튼이 떠야함 -> main.js에서 MintForm이 떠야하는데 그러려면 아래 작업을 해주어야함\n      // if (collectionContract) {\n      //   console.log('Collection contract deployed to ropsten detwork')\n\n      //   console.log('collectionContract address', collectionContract) //address 어떻게 찍나?\n      //   let totalSupply = await collectionCtx.loadTotalSupply(\n      //     collectionContract,\n      //   )\n      //   collectionCtx.setNftIsLoading(false) // 이렇게 호출하는게 맞나?\n      //   collectionCtx.loadCollection(collectionContract, totalSupply)\n      // } else {\n      //   window.alert(\n      //     'NFTMarketplace contract not deployed to detected network.',\n      //   )\n      // }\n\n      // // Metamask Event Subscription - Account changed\n      // window.ethereum.on('accountsChanged', (accounts) => {\n      //   web3Ctx.loadAccount(web3)\n      // })\n\n      // // Metamask Event Subscription - Network changed\n      // window.ethereum.on('chainChanged', (networkId) => {\n      //   window.location.reload()\n      // })\n    }\n\n    loadBlockchainData()\n  }, [])\n  const showContent = web3 && collectionCtx.contract && web3Ctx.account\n\n  return (\n    <React.Fragment>\n      {showContent && <MainArea />}\n      <BodyContent />\n    </React.Fragment>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}
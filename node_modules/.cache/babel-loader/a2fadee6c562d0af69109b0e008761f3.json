{"ast":null,"code":"var _jsxFileName = \"/Users/mina/Desktop/gradient_animated_site/src/store/CollectionProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport CollectionContext from './collection-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCollectionState = {\n  contract: null // totalSupply: null,\n  // collection: [],\n  // nftIsLoading: true,\n  // userFunds: null\n\n};\n\nconst PriceNFTPeducer = (state, action) => {\n  if (action.type === 'CONTRACT') {\n    return {\n      contract: action.contract,\n      totalSupply: state.totalSupply,\n      collection: state.collection,\n      nftIsLoading: state.nftIsLoading\n    };\n  } // if (action.type === 'LOADSUPPLY') {\n  //   return {\n  //     contract: state.contract,\n  //     totalSupply: action.totalSupply,\n  //     collection: state.collection,\n  //     nftIsLoading: state.nftIsLoading,\n  //   }\n  // }\n  // if (action.type === 'LOADCOLLECTION') {\n  //   return {\n  //     contract: state.contract,\n  //     totalSupply: state.totalSupply,\n  //     collection: action.collection,\n  //     nftIsLoading: state.nftIsLoading,\n  //   }\n  // }\n  // if (action.type === 'LOADING') {\n  //   return {\n  //     contract: state.contract,\n  //     totalSupply: state.totalSupply,\n  //     collection: state.collection,\n  //     nftIsLoading: action.loading,\n  //   }\n  // }\n  // if(action.type === 'LOADFUNDS') {\n  //   return {\n  //     contract: state.contract,\n  //     offerCount: state.offerCount,\n  //     offers: state.offers,\n  //     userFunds: action.userFunds,\n  //     mktIsLoading: state.mktIsLoading\n  //   };\n  // }\n\n\n  return defaultCollectionState;\n};\n\n_c = PriceNFTPeducer;\n\nconst CollectionProvider = props => {\n  _s();\n\n  const [CollectionState, dispatchCollectionAction] = useReducer(PriceNFTPeducer, defaultCollectionState);\n\n  const loadContractHandler = (address, abi, provider) => {\n    // const provider = new ethers.providers.Web3Provider(window.ethereum)\n    // const contract = new ethers.Contract(address, abi, provider)\n    const contract = address ? new ethers.Contract(address, abi, provider) : '';\n    console.log('Funding Contract is load!!', address);\n    dispatchCollectionAction({\n      type: 'CONTRACT',\n      contract: contract\n    });\n    return contract;\n  }; // const loadTotalSupplyHandler = async (contract) => {\n  //   console.log('loadTotalSupplyHandler is load!!')\n  //   const totalSupply = await contract.methods.tokenID().call()\n  //   dispatchCollectionAction({ type: 'LOADSUPPLY', totalSupply: totalSupply })\n  //   return totalSupply\n  // }\n  // const loadCollectionHandler = async (contract, totalSupply) => {\n  //   let collection = []\n  //   console.log('loadCollectionHandler is load!!')\n  //   for (let i = 0; i < totalSupply; i++) {\n  //     const hash = await contract.methods._tokenURIs(i).call()\n  //     try {\n  //       const response = await fetch(\n  //         `https://ipfs.infura.io/ipfs/${hash}?clear`,\n  //       )\n  //       if (!response.ok) {\n  //         throw new Error('Something went wrong')\n  //       }\n  //       const metadata = await response.json()\n  //       const owner = await contract.methods.ownerOf(i).call()\n  //       const price = await contract.methods.prices(i).call()\n  //       const fundingPot = await contract.methods.fundingPot(i).call()\n  //       console.log('price ', price)\n  //       console.log('fundingPot ', fundingPot)\n  //       // contract에서 데이터를 가져옴\n  //       collection = [\n  //         {\n  //           id: i,\n  //           title: metadata.properties.name.description,\n  //           img: metadata.properties.image.description,\n  //           owner: owner,\n  //           price: price,\n  //           fundingPot: fundingPot,\n  //         },\n  //         ...collection,\n  //       ]\n  //     } catch {\n  //       console.error('Something went wrong')\n  //     }\n  //   }\n  //   console.log('collection:', collection)\n  //   dispatchCollectionAction({ type: 'LOADCOLLECTION', collection: collection })\n  // }\n  // // const loadUserFundsHandler = async(contract, account) => {\n  // //   const userFunds = await contract.methods.userFunds(account).call();\n  // //   dispatchCollectionAction({type: 'LOADFUNDS', userFunds: userFunds});\n  // //   return userFunds;\n  // // };\n\n\n  const setNftIsLoadingHandler = loading => {\n    dispatchCollectionAction({\n      type: 'LOADING',\n      loading: loading\n    });\n  };\n\n  const collectionContext = {\n    contract: CollectionState.contract,\n    // totalSupply: CollectionState.totalSupply,\n    // collection: CollectionState.collection,\n    // nftIsLoading: CollectionState.nftIsLoading,\n    loadContract: loadContractHandler // loadTotalSupply: loadTotalSupplyHandler,\n    // loadCollection: loadCollectionHandler,\n    // setNftIsLoading: setNftIsLoadingHandler,\n\n  };\n  return /*#__PURE__*/_jsxDEV(CollectionContext.Provider, {\n    value: collectionContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CollectionProvider, \"ZbRmD8kAHPzijQQn9Hqowc3SWuI=\");\n\n_c2 = CollectionProvider;\nexport default CollectionProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PriceNFTPeducer\");\n$RefreshReg$(_c2, \"CollectionProvider\");","map":{"version":3,"sources":["/Users/mina/Desktop/gradient_animated_site/src/store/CollectionProvider.js"],"names":["useReducer","CollectionContext","defaultCollectionState","contract","PriceNFTPeducer","state","action","type","totalSupply","collection","nftIsLoading","CollectionProvider","props","CollectionState","dispatchCollectionAction","loadContractHandler","address","abi","provider","ethers","Contract","console","log","setNftIsLoadingHandler","loading","collectionContext","loadContract","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,OAAOC,iBAAP,MAA8B,sBAA9B;;AAEA,MAAMC,sBAAsB,GAAG;AAC7BC,EAAAA,QAAQ,EAAE,IADmB,CAE7B;AACA;AACA;AACA;;AAL6B,CAA/B;;AAQA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzC,MAAIA,MAAM,CAACC,IAAP,KAAgB,UAApB,EAAgC;AAC9B,WAAO;AACLJ,MAAAA,QAAQ,EAAEG,MAAM,CAACH,QADZ;AAELK,MAAAA,WAAW,EAAEH,KAAK,CAACG,WAFd;AAGLC,MAAAA,UAAU,EAAEJ,KAAK,CAACI,UAHb;AAILC,MAAAA,YAAY,EAAEL,KAAK,CAACK;AAJf,KAAP;AAMD,GARwC,CAUzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAOR,sBAAP;AACD,CA9CD;;KAAME,e;;AAgDN,MAAMO,kBAAkB,GAAIC,KAAD,IAAW;AAAA;;AACpC,QAAM,CAACC,eAAD,EAAkBC,wBAAlB,IAA8Cd,UAAU,CAC5DI,eAD4D,EAE5DF,sBAF4D,CAA9D;;AAKA,QAAMa,mBAAmB,GAAG,CAACC,OAAD,EAAUC,GAAV,EAAeC,QAAf,KAA4B;AACtD;AACA;AAEA,UAAMf,QAAQ,GAAGa,OAAO,GAAG,IAAIG,MAAM,CAACC,QAAX,CAAoBJ,OAApB,EAA6BC,GAA7B,EAAkCC,QAAlC,CAAH,GAAiD,EAAzE;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CN,OAA1C;AACAF,IAAAA,wBAAwB,CAAC;AAAEP,MAAAA,IAAI,EAAE,UAAR;AAAoBJ,MAAAA,QAAQ,EAAEA;AAA9B,KAAD,CAAxB;AACA,WAAOA,QAAP;AACD,GARD,CANoC,CAgBpC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAEA,QAAMoB,sBAAsB,GAAIC,OAAD,IAAa;AAC1CV,IAAAA,wBAAwB,CAAC;AAAEP,MAAAA,IAAI,EAAE,SAAR;AAAmBiB,MAAAA,OAAO,EAAEA;AAA5B,KAAD,CAAxB;AACD,GAFD;;AAIA,QAAMC,iBAAiB,GAAG;AACxBtB,IAAAA,QAAQ,EAAEU,eAAe,CAACV,QADF;AAExB;AACA;AACA;AACAuB,IAAAA,YAAY,EAAEX,mBALU,CAMxB;AACA;AACA;;AARwB,GAA1B;AAUA,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAEU,iBAAnC;AAAA,cACGb,KAAK,CAACe;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAvFD;;GAAMhB,kB;;MAAAA,kB;AAyFN,eAAeA,kBAAf","sourcesContent":["import { useReducer } from 'react'\n\nimport CollectionContext from './collection-context'\n\nconst defaultCollectionState = {\n  contract: null,\n  // totalSupply: null,\n  // collection: [],\n  // nftIsLoading: true,\n  // userFunds: null\n}\n\nconst PriceNFTPeducer = (state, action) => {\n  if (action.type === 'CONTRACT') {\n    return {\n      contract: action.contract,\n      totalSupply: state.totalSupply,\n      collection: state.collection,\n      nftIsLoading: state.nftIsLoading,\n    }\n  }\n\n  // if (action.type === 'LOADSUPPLY') {\n  //   return {\n  //     contract: state.contract,\n  //     totalSupply: action.totalSupply,\n  //     collection: state.collection,\n  //     nftIsLoading: state.nftIsLoading,\n  //   }\n  // }\n\n  // if (action.type === 'LOADCOLLECTION') {\n  //   return {\n  //     contract: state.contract,\n  //     totalSupply: state.totalSupply,\n  //     collection: action.collection,\n  //     nftIsLoading: state.nftIsLoading,\n  //   }\n  // }\n  // if (action.type === 'LOADING') {\n  //   return {\n  //     contract: state.contract,\n  //     totalSupply: state.totalSupply,\n  //     collection: state.collection,\n  //     nftIsLoading: action.loading,\n  //   }\n  // }\n  // if(action.type === 'LOADFUNDS') {\n  //   return {\n  //     contract: state.contract,\n  //     offerCount: state.offerCount,\n  //     offers: state.offers,\n  //     userFunds: action.userFunds,\n  //     mktIsLoading: state.mktIsLoading\n  //   };\n  // }\n\n  return defaultCollectionState\n}\n\nconst CollectionProvider = (props) => {\n  const [CollectionState, dispatchCollectionAction] = useReducer(\n    PriceNFTPeducer,\n    defaultCollectionState,\n  )\n\n  const loadContractHandler = (address, abi, provider) => {\n    // const provider = new ethers.providers.Web3Provider(window.ethereum)\n    // const contract = new ethers.Contract(address, abi, provider)\n\n    const contract = address ? new ethers.Contract(address, abi, provider) : ''\n    console.log('Funding Contract is load!!', address)\n    dispatchCollectionAction({ type: 'CONTRACT', contract: contract })\n    return contract\n  }\n\n  // const loadTotalSupplyHandler = async (contract) => {\n  //   console.log('loadTotalSupplyHandler is load!!')\n  //   const totalSupply = await contract.methods.tokenID().call()\n  //   dispatchCollectionAction({ type: 'LOADSUPPLY', totalSupply: totalSupply })\n  //   return totalSupply\n  // }\n\n  // const loadCollectionHandler = async (contract, totalSupply) => {\n  //   let collection = []\n  //   console.log('loadCollectionHandler is load!!')\n  //   for (let i = 0; i < totalSupply; i++) {\n  //     const hash = await contract.methods._tokenURIs(i).call()\n  //     try {\n  //       const response = await fetch(\n  //         `https://ipfs.infura.io/ipfs/${hash}?clear`,\n  //       )\n  //       if (!response.ok) {\n  //         throw new Error('Something went wrong')\n  //       }\n\n  //       const metadata = await response.json()\n  //       const owner = await contract.methods.ownerOf(i).call()\n  //       const price = await contract.methods.prices(i).call()\n  //       const fundingPot = await contract.methods.fundingPot(i).call()\n  //       console.log('price ', price)\n  //       console.log('fundingPot ', fundingPot)\n  //       // contract에서 데이터를 가져옴\n  //       collection = [\n  //         {\n  //           id: i,\n  //           title: metadata.properties.name.description,\n  //           img: metadata.properties.image.description,\n  //           owner: owner,\n  //           price: price,\n  //           fundingPot: fundingPot,\n  //         },\n  //         ...collection,\n  //       ]\n  //     } catch {\n  //       console.error('Something went wrong')\n  //     }\n  //   }\n  //   console.log('collection:', collection)\n  //   dispatchCollectionAction({ type: 'LOADCOLLECTION', collection: collection })\n  // }\n\n  // // const loadUserFundsHandler = async(contract, account) => {\n  // //   const userFunds = await contract.methods.userFunds(account).call();\n  // //   dispatchCollectionAction({type: 'LOADFUNDS', userFunds: userFunds});\n  // //   return userFunds;\n  // // };\n\n  const setNftIsLoadingHandler = (loading) => {\n    dispatchCollectionAction({ type: 'LOADING', loading: loading })\n  }\n\n  const collectionContext = {\n    contract: CollectionState.contract,\n    // totalSupply: CollectionState.totalSupply,\n    // collection: CollectionState.collection,\n    // nftIsLoading: CollectionState.nftIsLoading,\n    loadContract: loadContractHandler,\n    // loadTotalSupply: loadTotalSupplyHandler,\n    // loadCollection: loadCollectionHandler,\n    // setNftIsLoading: setNftIsLoadingHandler,\n  }\n  return (\n    <CollectionContext.Provider value={collectionContext}>\n      {props.children}\n    </CollectionContext.Provider>\n  )\n}\n\nexport default CollectionProvider\n"]},"metadata":{},"sourceType":"module"}
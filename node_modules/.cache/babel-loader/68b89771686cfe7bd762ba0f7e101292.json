{"ast":null,"code":"var _jsxFileName = \"/Users/mina/Desktop/gradient_animated_site/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from 'react';\nimport BodyContent from './Components/BodyContent';\nimport MainArea from './Components/MainArea';\nimport web3 from './Connection/web3';\nimport Web3Context from './Store/web3-context';\nimport CollectionContext from './Store/collection-context';\nimport { nftAddress } from './constants/address';\nimport MyNFT from './constants/MyNFT';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const web3Ctx = useContext(Web3Context);\n  const collectionCtx = useContext(CollectionContext); //내가 만든 Contract 추가\n  // const fundingCtx = useContext(FundingContext)\n\n  useEffect(() => {\n    // Check if the user has Metamask active\n    if (!web3) {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n      return;\n    } // Function to fetch all the blockchain data\n\n\n    const loadBlockchainData = async () => {\n      // Request accounts acccess if needed\n      try {\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n      } catch (error) {\n        console.error(error);\n      } // Load account\n\n\n      const accounts = await web3Ctx.loadAccount(web3); // Load Network ID\n\n      const networkId = await web3Ctx.loadNetworkId(web3);\n      const collectionContract = collectionCtx.loadContract(web3, MyNFT.abi, nftAddress); //mint 버튼이 떠야함 -> main.js에서 MintForm이 떠야하는데 그러려면 아래 작업을 해주어야함\n\n      if (collectionContract) {\n        console.log('Collection contract deployed to ropsten detwork');\n        console.log('collectionContract address', collectionContract); //address 어떻게 찍나?\n\n        let totalSupply = await collectionCtx.loadTotalSupply(collectionContract);\n        fundingCtx.setNftIsLoading(false); // 이렇게 호출하는게 맞나?\n\n        fundingCtx.loadCollection(collectionContract, totalSupply);\n      } else {\n        window.alert('NFTMarketplace contract not deployed to detected network.');\n      } // Metamask Event Subscription - Account changed\n\n\n      window.ethereum.on('accountsChanged', accounts => {\n        web3Ctx.loadAccount(web3);\n      }); // Metamask Event Subscription - Network changed\n\n      window.ethereum.on('chainChanged', chainId => {\n        window.location.reload();\n      });\n    };\n\n    loadBlockchainData();\n  }, []);\n  const showContent = web3 && collectionCtx.contract && web3Ctx.account;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [showContent && /*#__PURE__*/_jsxDEV(MainArea, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(BodyContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"KTV223dRPacKKrWZxoqbed8ewCo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/mina/Desktop/gradient_animated_site/src/App.js"],"names":["React","useContext","useEffect","BodyContent","MainArea","web3","Web3Context","CollectionContext","nftAddress","MyNFT","App","web3Ctx","collectionCtx","window","alert","loadBlockchainData","ethereum","request","method","error","console","accounts","loadAccount","networkId","loadNetworkId","collectionContract","loadContract","abi","log","totalSupply","loadTotalSupply","fundingCtx","setNftIsLoading","loadCollection","on","chainId","location","reload","showContent","contract","account"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AAEA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AAEA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AAEA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAOC,KAAP,MAAkB,mBAAlB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAMC,OAAO,GAAGV,UAAU,CAACK,WAAD,CAA1B;AACA,QAAMM,aAAa,GAAGX,UAAU,CAACM,iBAAD,CAAhC,CAFgB,CAGhB;AACA;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAI,CAACG,IAAL,EAAW;AACTQ,MAAAA,MAAM,CAACC,KAAP,CACE,qEADF;AAGA;AACD,KAPa,CASd;;;AACA,UAAMC,kBAAkB,GAAG,YAAY;AACrC;AACA,UAAI;AACF,cAAMF,MAAM,CAACG,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAxB,CAAN;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,OANoC,CAQrC;;;AACA,YAAME,QAAQ,GAAG,MAAMV,OAAO,CAACW,WAAR,CAAoBjB,IAApB,CAAvB,CATqC,CAUrC;;AACA,YAAMkB,SAAS,GAAG,MAAMZ,OAAO,CAACa,aAAR,CAAsBnB,IAAtB,CAAxB;AAEA,YAAMoB,kBAAkB,GAAGb,aAAa,CAACc,YAAd,CACzBrB,IADyB,EAEzBI,KAAK,CAACkB,GAFmB,EAGzBnB,UAHyB,CAA3B,CAbqC,CAmBrC;;AACA,UAAIiB,kBAAJ,EAAwB;AACtBL,QAAAA,OAAO,CAACQ,GAAR,CAAY,iDAAZ;AAEAR,QAAAA,OAAO,CAACQ,GAAR,CAAY,4BAAZ,EAA0CH,kBAA1C,EAHsB,CAGwC;;AAC9D,YAAII,WAAW,GAAG,MAAMjB,aAAa,CAACkB,eAAd,CACtBL,kBADsB,CAAxB;AAGAM,QAAAA,UAAU,CAACC,eAAX,CAA2B,KAA3B,EAPsB,CAOY;;AAClCD,QAAAA,UAAU,CAACE,cAAX,CAA0BR,kBAA1B,EAA8CI,WAA9C;AACD,OATD,MASO;AACLhB,QAAAA,MAAM,CAACC,KAAP,CACE,2DADF;AAGD,OAjCoC,CAmCrC;;;AACAD,MAAAA,MAAM,CAACG,QAAP,CAAgBkB,EAAhB,CAAmB,iBAAnB,EAAuCb,QAAD,IAAc;AAClDV,QAAAA,OAAO,CAACW,WAAR,CAAoBjB,IAApB;AACD,OAFD,EApCqC,CAwCrC;;AACAQ,MAAAA,MAAM,CAACG,QAAP,CAAgBkB,EAAhB,CAAmB,cAAnB,EAAoCC,OAAD,IAAa;AAC9CtB,QAAAA,MAAM,CAACuB,QAAP,CAAgBC,MAAhB;AACD,OAFD;AAGD,KA5CD;;AA8CAtB,IAAAA,kBAAkB;AACnB,GAzDQ,EAyDN,EAzDM,CAAT;AA0DA,QAAMuB,WAAW,GAAGjC,IAAI,IAAIO,aAAa,CAAC2B,QAAtB,IAAkC5B,OAAO,CAAC6B,OAA9D;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,eACGF,WAAW,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YADlB,eAEE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAvED;;GAAM5B,G;;KAAAA,G;AAyEN,eAAeA,GAAf","sourcesContent":["import React, { useContext, useEffect } from 'react'\n\nimport BodyContent from './Components/BodyContent'\nimport MainArea from './Components/MainArea'\n\nimport web3 from './Connection/web3'\nimport Web3Context from './Store/web3-context'\nimport CollectionContext from './Store/collection-context'\n\nimport { nftAddress } from './constants/address'\nimport MyNFT from './constants/MyNFT'\n\nconst App = () => {\n  const web3Ctx = useContext(Web3Context)\n  const collectionCtx = useContext(CollectionContext)\n  //내가 만든 Contract 추가\n  // const fundingCtx = useContext(FundingContext)\n  useEffect(() => {\n    // Check if the user has Metamask active\n    if (!web3) {\n      window.alert(\n        'Non-Ethereum browser detected. You should consider trying MetaMask!',\n      )\n      return\n    }\n\n    // Function to fetch all the blockchain data\n    const loadBlockchainData = async () => {\n      // Request accounts acccess if needed\n      try {\n        await window.ethereum.request({ method: 'eth_requestAccounts' })\n      } catch (error) {\n        console.error(error)\n      }\n\n      // Load account\n      const accounts = await web3Ctx.loadAccount(web3)\n      // Load Network ID\n      const networkId = await web3Ctx.loadNetworkId(web3)\n\n      const collectionContract = collectionCtx.loadContract(\n        web3,\n        MyNFT.abi,\n        nftAddress,\n      )\n\n      //mint 버튼이 떠야함 -> main.js에서 MintForm이 떠야하는데 그러려면 아래 작업을 해주어야함\n      if (collectionContract) {\n        console.log('Collection contract deployed to ropsten detwork')\n\n        console.log('collectionContract address', collectionContract) //address 어떻게 찍나?\n        let totalSupply = await collectionCtx.loadTotalSupply(\n          collectionContract,\n        )\n        fundingCtx.setNftIsLoading(false) // 이렇게 호출하는게 맞나?\n        fundingCtx.loadCollection(collectionContract, totalSupply)\n      } else {\n        window.alert(\n          'NFTMarketplace contract not deployed to detected network.',\n        )\n      }\n\n      // Metamask Event Subscription - Account changed\n      window.ethereum.on('accountsChanged', (accounts) => {\n        web3Ctx.loadAccount(web3)\n      })\n\n      // Metamask Event Subscription - Network changed\n      window.ethereum.on('chainChanged', (chainId) => {\n        window.location.reload()\n      })\n    }\n\n    loadBlockchainData()\n  }, [])\n  const showContent = web3 && collectionCtx.contract && web3Ctx.account\n\n  return (\n    <div className=\"App\">\n      {showContent && <MainArea />}\n      <BodyContent />\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}
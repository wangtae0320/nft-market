{"ast":null,"code":"var _jsxFileName = \"/Users/mina/Desktop/gradient_animated_site/src/Store/Web3Provider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport Web3Context from './web3-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultWeb3State = {\n  account: null,\n  networkId: null\n};\n\nconst web3Reducer = (state, action) => {\n  if (action.type === 'ACCOUNT') {\n    return {\n      account: action.account,\n      networkId: state.networkId\n    };\n  }\n\n  if (action.type === 'NETWORKID') {\n    return {\n      account: state.account,\n      networkId: action.networkId\n    };\n  }\n\n  return defaultWeb3State;\n};\n\nconst Web3Provider = props => {\n  _s();\n\n  const [web3State, dispatchWeb3Action] = useReducer(web3Reducer, defaultWeb3State);\n\n  const loadAccountHandler = async web3 => {\n    const accounts = await web3.eth.getAccounts();\n    const account = accounts[0];\n    dispatchWeb3Action({\n      type: 'ACCOUNT',\n      account: account\n    });\n    return account;\n  };\n\n  const loadNetworkIdHandler = async web3 => {\n    const networkId = await web3.eth.net.getId();\n    dispatchWeb3Action({\n      type: 'NETWORKID',\n      networkId: networkId\n    });\n    return networkId;\n  };\n\n  const web3Context = {\n    account: web3State.account,\n    networkId: web3State.networkId,\n    loadAccount: loadAccountHandler,\n    loadNetworkId: loadNetworkIdHandler\n  };\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: web3Context,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Web3Provider, \"C3AzG0u+y2G3aAnVzYqJS6tWeFM=\");\n\n_c = Web3Provider;\nexport default Web3Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"sources":["/Users/mina/Desktop/gradient_animated_site/src/Store/Web3Provider.js"],"names":["useReducer","Web3Context","defaultWeb3State","account","networkId","web3Reducer","state","action","type","Web3Provider","props","web3State","dispatchWeb3Action","loadAccountHandler","web3","accounts","eth","getAccounts","loadNetworkIdHandler","net","getId","web3Context","loadAccount","loadNetworkId","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,OAAOC,WAAP,MAAwB,gBAAxB;;AAEA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,OAAO,EAAE,IADc;AAEvBC,EAAAA,SAAS,EAAE;AAFY,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC,MAAIA,MAAM,CAACC,IAAP,KAAgB,SAApB,EAA+B;AAC7B,WAAO;AACLL,MAAAA,OAAO,EAAEI,MAAM,CAACJ,OADX;AAELC,MAAAA,SAAS,EAAEE,KAAK,CAACF;AAFZ,KAAP;AAID;;AAED,MAAIG,MAAM,CAACC,IAAP,KAAgB,WAApB,EAAiC;AAC/B,WAAO;AACLL,MAAAA,OAAO,EAAEG,KAAK,CAACH,OADV;AAELC,MAAAA,SAAS,EAAEG,MAAM,CAACH;AAFb,KAAP;AAID;;AAED,SAAOF,gBAAP;AACD,CAhBD;;AAkBA,MAAMO,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkCZ,UAAU,CAChDK,WADgD,EAEhDH,gBAFgD,CAAlD;;AAKA,QAAMW,kBAAkB,GAAG,MAAOC,IAAP,IAAgB;AACzC,UAAMC,QAAQ,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASC,WAAT,EAAvB;AACA,UAAMd,OAAO,GAAGY,QAAQ,CAAC,CAAD,CAAxB;AACAH,IAAAA,kBAAkB,CAAC;AAAEJ,MAAAA,IAAI,EAAE,SAAR;AAAmBL,MAAAA,OAAO,EAAEA;AAA5B,KAAD,CAAlB;AACA,WAAOA,OAAP;AACD,GALD;;AAOA,QAAMe,oBAAoB,GAAG,MAAOJ,IAAP,IAAgB;AAC3C,UAAMV,SAAS,GAAG,MAAMU,IAAI,CAACE,GAAL,CAASG,GAAT,CAAaC,KAAb,EAAxB;AACAR,IAAAA,kBAAkB,CAAC;AAAEJ,MAAAA,IAAI,EAAE,WAAR;AAAqBJ,MAAAA,SAAS,EAAEA;AAAhC,KAAD,CAAlB;AACA,WAAOA,SAAP;AACD,GAJD;;AAMA,QAAMiB,WAAW,GAAG;AAClBlB,IAAAA,OAAO,EAAEQ,SAAS,CAACR,OADD;AAElBC,IAAAA,SAAS,EAAEO,SAAS,CAACP,SAFH;AAGlBkB,IAAAA,WAAW,EAAET,kBAHK;AAIlBU,IAAAA,aAAa,EAAEL;AAJG,GAApB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEG,WAA7B;AAAA,cACGX,KAAK,CAACc;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA/BD;;GAAMf,Y;;KAAAA,Y;AAiCN,eAAeA,YAAf","sourcesContent":["import { useReducer } from 'react'\n\nimport Web3Context from './web3-context'\n\nconst defaultWeb3State = {\n  account: null,\n  networkId: null,\n}\n\nconst web3Reducer = (state, action) => {\n  if (action.type === 'ACCOUNT') {\n    return {\n      account: action.account,\n      networkId: state.networkId,\n    }\n  }\n\n  if (action.type === 'NETWORKID') {\n    return {\n      account: state.account,\n      networkId: action.networkId,\n    }\n  }\n\n  return defaultWeb3State\n}\n\nconst Web3Provider = (props) => {\n  const [web3State, dispatchWeb3Action] = useReducer(\n    web3Reducer,\n    defaultWeb3State,\n  )\n\n  const loadAccountHandler = async (web3) => {\n    const accounts = await web3.eth.getAccounts()\n    const account = accounts[0]\n    dispatchWeb3Action({ type: 'ACCOUNT', account: account })\n    return account\n  }\n\n  const loadNetworkIdHandler = async (web3) => {\n    const networkId = await web3.eth.net.getId()\n    dispatchWeb3Action({ type: 'NETWORKID', networkId: networkId })\n    return networkId\n  }\n\n  const web3Context = {\n    account: web3State.account,\n    networkId: web3State.networkId,\n    loadAccount: loadAccountHandler,\n    loadNetworkId: loadNetworkIdHandler,\n  }\n\n  return (\n    <Web3Context.Provider value={web3Context}>\n      {props.children}\n    </Web3Context.Provider>\n  )\n}\n\nexport default Web3Provider\n"]},"metadata":{},"sourceType":"module"}
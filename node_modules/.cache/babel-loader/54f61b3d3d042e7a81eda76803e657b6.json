{"ast":null,"code":"var _jsxFileName = \"/Users/mina/Desktop/gradient_animated_site/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from 'react';\nimport BodyContent from './components/BodyContent';\nimport MainArea from './components/MainArea';\nimport web3 from './connection/web3';\nimport Web3Context from './store/web3-context';\nimport CollectionContext from './store/collection-context';\nimport { madTokenAddress } from './constants/address';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst contractABI = require('./abis/MADTOKEN.json'); // import MyNFT from './Abis/MyNFT'\n// import MADTOKEN from './Abis/MADTOKEN'\n// const MyNFT = require('./Abis/MyNFT.json')\n\n\nconst App = () => {\n  _s();\n\n  const web3Ctx = useContext(Web3Context);\n  const collectionCtx = useContext(CollectionContext); //내가 만든 Contract 추가\n  // const fundingCtx = useContext(FundingContext)\n\n  useEffect(() => {\n    // Check if the user has Metamask active\n    if (!web3) {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n      return;\n    } // Function to fetch all the blockchain data\n\n\n    const loadBlockchainData = async () => {\n      // Request accounts acccess if needed\n      try {\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n      } catch (error) {\n        console.error(error);\n      } // Load account\n\n\n      const accounts = await web3Ctx.loadAccount(web3); // Load Network ID\n\n      const networkId = await web3Ctx.loadNetworkId(web3);\n      console.log('accounts!!' + accounts);\n      console.log('network ID!!' + networkId); // const collectionContract = (web3, NFTCollection, deployedNetwork)\n\n      const loadContract = new web3.eth.Contract(web3, contractABI.abi, madTokenAddress);\n      console.log(loadContract.address); // const collectionContract = collectionCtx.loadContract(\n      //   web3,\n      //   MADTOKEN.abi,\n      //   madTokenAddress.address,\n      // )\n      // console.log(collectionContract.address)\n      // //mint 버튼이 떠야함 -> main.js에서 MintForm이 떠야하는데 그러려면 아래 작업을 해주어야함\n      // if (collectionContract) {\n      //   console.log('Collection contract deployed to ropsten detwork')\n      //   console.log('collectionContract address', collectionContract) //address 어떻게 찍나?\n      //   let totalSupply = await collectionCtx.loadTotalSupply(\n      //     collectionContract,\n      //   )\n      //   collectionCtx.setNftIsLoading(false) // 이렇게 호출하는게 맞나?\n      //   collectionCtx.loadCollection(collectionContract, totalSupply)\n      // } else {\n      //   window.alert(\n      //     'NFTMarketplace contract not deployed to detected network.',\n      //   )\n      // }\n      // // Metamask Event Subscription - Account changed\n      // window.ethereum.on('accountsChanged', (accounts) => {\n      //   web3Ctx.loadAccount(web3)\n      // })\n      // // Metamask Event Subscription - Network changed\n      // window.ethereum.on('chainChanged', (chainId) => {\n      //   window.location.reload()\n      // })\n    };\n\n    loadBlockchainData();\n  }, []);\n  const showContent = web3 && collectionCtx.contract && web3Ctx.account;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [showContent && /*#__PURE__*/_jsxDEV(MainArea, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(BodyContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"KTV223dRPacKKrWZxoqbed8ewCo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/mina/Desktop/gradient_animated_site/src/App.js"],"names":["React","useContext","useEffect","BodyContent","MainArea","web3","Web3Context","CollectionContext","madTokenAddress","contractABI","require","App","web3Ctx","collectionCtx","window","alert","loadBlockchainData","ethereum","request","method","error","console","accounts","loadAccount","networkId","loadNetworkId","log","loadContract","eth","Contract","abi","address","showContent","contract","account"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AAEA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AAEA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AAEA,SAASC,eAAT,QAAgC,qBAAhC;;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,sBAAD,CAA3B,C,CACA;AACA;AACA;;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAMC,OAAO,GAAGX,UAAU,CAACK,WAAD,CAA1B;AACA,QAAMO,aAAa,GAAGZ,UAAU,CAACM,iBAAD,CAAhC,CAFgB,CAGhB;AACA;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAI,CAACG,IAAL,EAAW;AACTS,MAAAA,MAAM,CAACC,KAAP,CACE,qEADF;AAGA;AACD,KAPa,CASd;;;AACA,UAAMC,kBAAkB,GAAG,YAAY;AACrC;AACA,UAAI;AACF,cAAMF,MAAM,CAACG,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAxB,CAAN;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,OANoC,CAQrC;;;AACA,YAAME,QAAQ,GAAG,MAAMV,OAAO,CAACW,WAAR,CAAoBlB,IAApB,CAAvB,CATqC,CAUrC;;AACA,YAAMmB,SAAS,GAAG,MAAMZ,OAAO,CAACa,aAAR,CAAsBpB,IAAtB,CAAxB;AACAgB,MAAAA,OAAO,CAACK,GAAR,CAAY,eAAeJ,QAA3B;AACAD,MAAAA,OAAO,CAACK,GAAR,CAAY,iBAAiBF,SAA7B,EAbqC,CAerC;;AACA,YAAMG,YAAY,GAAG,IAAItB,IAAI,CAACuB,GAAL,CAASC,QAAb,CACnBxB,IADmB,EAEnBI,WAAW,CAACqB,GAFO,EAGnBtB,eAHmB,CAArB;AAKAa,MAAAA,OAAO,CAACK,GAAR,CAAYC,YAAY,CAACI,OAAzB,EArBqC,CAsBrC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACD,KAtDD;;AAwDAf,IAAAA,kBAAkB;AACnB,GAnEQ,EAmEN,EAnEM,CAAT;AAoEA,QAAMgB,WAAW,GAAG3B,IAAI,IAAIQ,aAAa,CAACoB,QAAtB,IAAkCrB,OAAO,CAACsB,OAA9D;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,eACGF,WAAW,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YADlB,eAEE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAjFD;;GAAMrB,G;;KAAAA,G;AAmFN,eAAeA,GAAf","sourcesContent":["import React, { useContext, useEffect } from 'react'\n\nimport BodyContent from './components/BodyContent'\nimport MainArea from './components/MainArea'\n\nimport web3 from './connection/web3'\nimport Web3Context from './store/web3-context'\nimport CollectionContext from './store/collection-context'\n\nimport { madTokenAddress } from './constants/address'\nconst contractABI = require('./abis/MADTOKEN.json')\n// import MyNFT from './Abis/MyNFT'\n// import MADTOKEN from './Abis/MADTOKEN'\n// const MyNFT = require('./Abis/MyNFT.json')\nconst App = () => {\n  const web3Ctx = useContext(Web3Context)\n  const collectionCtx = useContext(CollectionContext)\n  //내가 만든 Contract 추가\n  // const fundingCtx = useContext(FundingContext)\n  useEffect(() => {\n    // Check if the user has Metamask active\n    if (!web3) {\n      window.alert(\n        'Non-Ethereum browser detected. You should consider trying MetaMask!',\n      )\n      return\n    }\n\n    // Function to fetch all the blockchain data\n    const loadBlockchainData = async () => {\n      // Request accounts acccess if needed\n      try {\n        await window.ethereum.request({ method: 'eth_requestAccounts' })\n      } catch (error) {\n        console.error(error)\n      }\n\n      // Load account\n      const accounts = await web3Ctx.loadAccount(web3)\n      // Load Network ID\n      const networkId = await web3Ctx.loadNetworkId(web3)\n      console.log('accounts!!' + accounts)\n      console.log('network ID!!' + networkId)\n\n      // const collectionContract = (web3, NFTCollection, deployedNetwork)\n      const loadContract = new web3.eth.Contract(\n        web3,\n        contractABI.abi,\n        madTokenAddress,\n      )\n      console.log(loadContract.address)\n      // const collectionContract = collectionCtx.loadContract(\n      //   web3,\n      //   MADTOKEN.abi,\n      //   madTokenAddress.address,\n      // )\n      // console.log(collectionContract.address)\n\n      // //mint 버튼이 떠야함 -> main.js에서 MintForm이 떠야하는데 그러려면 아래 작업을 해주어야함\n      // if (collectionContract) {\n      //   console.log('Collection contract deployed to ropsten detwork')\n\n      //   console.log('collectionContract address', collectionContract) //address 어떻게 찍나?\n      //   let totalSupply = await collectionCtx.loadTotalSupply(\n      //     collectionContract,\n      //   )\n      //   collectionCtx.setNftIsLoading(false) // 이렇게 호출하는게 맞나?\n      //   collectionCtx.loadCollection(collectionContract, totalSupply)\n      // } else {\n      //   window.alert(\n      //     'NFTMarketplace contract not deployed to detected network.',\n      //   )\n      // }\n\n      // // Metamask Event Subscription - Account changed\n      // window.ethereum.on('accountsChanged', (accounts) => {\n      //   web3Ctx.loadAccount(web3)\n      // })\n\n      // // Metamask Event Subscription - Network changed\n      // window.ethereum.on('chainChanged', (chainId) => {\n      //   window.location.reload()\n      // })\n    }\n\n    loadBlockchainData()\n  }, [])\n  const showContent = web3 && collectionCtx.contract && web3Ctx.account\n\n  return (\n    <div className=\"App\">\n      {showContent && <MainArea />}\n      <BodyContent />\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}
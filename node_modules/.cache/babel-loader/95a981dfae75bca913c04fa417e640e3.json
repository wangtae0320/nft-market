{"ast":null,"code":"var _jsxFileName = \"/Users/mina/Desktop/gradient_animated_site/src/store/CollectionProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport CollectionContext from './collection-context';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCollectionState = {\n  contract: null,\n  totalSupply: null // collection: [],\n  // nftIsLoading: true,\n  // userFunds: null\n\n};\n\nconst PriceNFTPeducer = (state, action) => {\n  if (action.type === 'CONTRACT') {\n    return {\n      contract: action.contract,\n      totalSupply: state.totalSupply,\n      collection: state.collection,\n      nftIsLoading: state.nftIsLoading\n    };\n  }\n\n  if (action.type === 'LOADSUPPLY') {\n    return {\n      contract: state.contract,\n      totalSupply: action.totalSupply,\n      collection: state.collection,\n      nftIsLoading: state.nftIsLoading\n    };\n  } // if (action.type === 'LOADCOLLECTION') {\n  //   return {\n  //     contract: state.contract,\n  //     totalSupply: state.totalSupply,\n  //     collection: action.collection,\n  //     nftIsLoading: state.nftIsLoading,\n  //   }\n  // }\n  // if (action.type === 'LOADING') {\n  //   return {\n  //     contract: state.contract,\n  //     totalSupply: state.totalSupply,\n  //     collection: state.collection,\n  //     nftIsLoading: action.loading,\n  //   }\n  // }\n  // if(action.type === 'LOADFUNDS') {\n  //   return {\n  //     contract: state.contract,\n  //     offerCount: state.offerCount,\n  //     offers: state.offers,\n  //     userFunds: action.userFunds,\n  //     mktIsLoading: state.mktIsLoading\n  //   };\n  // }\n\n\n  return defaultCollectionState;\n};\n\n_c = PriceNFTPeducer;\n\nconst CollectionProvider = props => {\n  _s();\n\n  const [CollectionState, dispatchCollectionAction] = useReducer(PriceNFTPeducer, defaultCollectionState);\n\n  const loadContractHandler = (address, abi, provider) => {\n    const contract = address ? new ethers.Contract(address, abi, provider) : '';\n    console.log('Funding Contract is load!!', address);\n    dispatchCollectionAction({\n      type: 'CONTRACT',\n      contract: contract\n    });\n    return contract;\n  };\n\n  const loadTotalSupplyHandler = async contract => {\n    console.log('loadTotalSupplyHandler is load222!!');\n    const totalSupply = await contract.totalSupply();\n    console.log('loadTotalSupplyHandler is load222!!' + totalSupply);\n    dispatchCollectionAction({\n      type: 'LOADSUPPLY',\n      totalSupply: totalSupply\n    });\n    return totalSupply;\n  };\n\n  const loadCollectionHandler = async (contract, totalSupply) => {\n    let collection = [];\n    console.log('loadCollectionHandler is load!!');\n\n    for (let i = 0; i < totalSupply; i++) {\n      const hash = await contract.tokenURI(i);\n      console.log(hash);\n\n      try {\n        const response = await fetch(`https://ipfs.infura.io/ipfs/${hash}?clear`);\n\n        if (!response.ok) {\n          throw new Error('Something went wrong');\n        }\n\n        const metadata = await response.json();\n        const owner = await contract.methods.ownerOf(i).call();\n        const price = await contract.methods.prices(i).call();\n        const fundingPot = await contract.methods.fundingPot(i).call();\n        console.log('price ', price);\n        console.log('fundingPot ', fundingPot); // contract에서 데이터를 가져옴\n\n        collection = [{\n          id: i,\n          title: metadata.properties.name.description,\n          img: metadata.properties.image.description,\n          owner: owner,\n          price: price,\n          fundingPot: fundingPot\n        }, ...collection];\n      } catch {\n        console.error('Something went wrong');\n      }\n    }\n\n    console.log('collection:', collection);\n    dispatchCollectionAction({\n      type: 'LOADCOLLECTION',\n      collection: collection\n    });\n  }; // const loadUserFundsHandler = async(contract, account) => {\n  //   const userFunds = await contract.methods.userFunds(account).call();\n  //   dispatchCollectionAction({type: 'LOADFUNDS', userFunds: userFunds});\n  //   return userFunds;\n  // };\n\n\n  const setNftIsLoadingHandler = loading => {\n    dispatchCollectionAction({\n      type: 'LOADING',\n      loading: loading\n    });\n  };\n\n  const collectionContext = {\n    contract: CollectionState.contract,\n    totalSupply: CollectionState.totalSupply,\n    collection: CollectionState.collection,\n    nftIsLoading: CollectionState.nftIsLoading,\n    loadContract: loadContractHandler,\n    loadTotalSupply: loadTotalSupplyHandler,\n    loadCollection: loadCollectionHandler,\n    setNftIsLoading: setNftIsLoadingHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CollectionContext.Provider, {\n    value: collectionContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CollectionProvider, \"ZbRmD8kAHPzijQQn9Hqowc3SWuI=\");\n\n_c2 = CollectionProvider;\nexport default CollectionProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PriceNFTPeducer\");\n$RefreshReg$(_c2, \"CollectionProvider\");","map":{"version":3,"sources":["/Users/mina/Desktop/gradient_animated_site/src/store/CollectionProvider.js"],"names":["useReducer","CollectionContext","ethers","defaultCollectionState","contract","totalSupply","PriceNFTPeducer","state","action","type","collection","nftIsLoading","CollectionProvider","props","CollectionState","dispatchCollectionAction","loadContractHandler","address","abi","provider","Contract","console","log","loadTotalSupplyHandler","loadCollectionHandler","i","hash","tokenURI","response","fetch","ok","Error","metadata","json","owner","methods","ownerOf","call","price","prices","fundingPot","id","title","properties","name","description","img","image","error","setNftIsLoadingHandler","loading","collectionContext","loadContract","loadTotalSupply","loadCollection","setNftIsLoading","children"],"mappings":"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","sourcesContent":["import { useReducer } from 'react'\n\nimport CollectionContext from './collection-context'\nimport { ethers } from 'ethers'\n\nconst defaultCollectionState = {\n  contract: null,\n  totalSupply: null,\n  // collection: [],\n  // nftIsLoading: true,\n  // userFunds: null\n}\n\nconst PriceNFTPeducer = (state, action) => {\n  if (action.type === 'CONTRACT') {\n    return {\n      contract: action.contract,\n      totalSupply: state.totalSupply,\n      collection: state.collection,\n      nftIsLoading: state.nftIsLoading,\n    }\n  }\n\n  if (action.type === 'LOADSUPPLY') {\n    return {\n      contract: state.contract,\n      totalSupply: action.totalSupply,\n      collection: state.collection,\n      nftIsLoading: state.nftIsLoading,\n    }\n  }\n\n  // if (action.type === 'LOADCOLLECTION') {\n  //   return {\n  //     contract: state.contract,\n  //     totalSupply: state.totalSupply,\n  //     collection: action.collection,\n  //     nftIsLoading: state.nftIsLoading,\n  //   }\n  // }\n  // if (action.type === 'LOADING') {\n  //   return {\n  //     contract: state.contract,\n  //     totalSupply: state.totalSupply,\n  //     collection: state.collection,\n  //     nftIsLoading: action.loading,\n  //   }\n  // }\n  // if(action.type === 'LOADFUNDS') {\n  //   return {\n  //     contract: state.contract,\n  //     offerCount: state.offerCount,\n  //     offers: state.offers,\n  //     userFunds: action.userFunds,\n  //     mktIsLoading: state.mktIsLoading\n  //   };\n  // }\n\n  return defaultCollectionState\n}\n\nconst CollectionProvider = (props) => {\n  const [CollectionState, dispatchCollectionAction] = useReducer(\n    PriceNFTPeducer,\n    defaultCollectionState,\n  )\n\n  const loadContractHandler = (address, abi, provider) => {\n    const contract = address ? new ethers.Contract(address, abi, provider) : ''\n    console.log('Funding Contract is load!!', address)\n    dispatchCollectionAction({ type: 'CONTRACT', contract: contract })\n    return contract\n  }\n\n  const loadTotalSupplyHandler = async (contract) => {\n    console.log('loadTotalSupplyHandler is load222!!')\n    const totalSupply = await contract.totalSupply()\n    console.log('loadTotalSupplyHandler is load222!!' + totalSupply)\n    dispatchCollectionAction({ type: 'LOADSUPPLY', totalSupply: totalSupply })\n    return totalSupply\n  }\n\n  const loadCollectionHandler = async (contract, totalSupply) => {\n    let collection = []\n    console.log('loadCollectionHandler is load!!')\n    for (let i = 0; i < totalSupply; i++) {\n      const hash = await contract.tokenURI(i)\n      console.log(hash)\n      try {\n        const response = await fetch(\n          `https://ipfs.infura.io/ipfs/${hash}?clear`,\n        )\n        if (!response.ok) {\n          throw new Error('Something went wrong')\n        }\n\n        const metadata = await response.json()\n        const owner = await contract.methods.ownerOf(i).call()\n        const price = await contract.methods.prices(i).call()\n        const fundingPot = await contract.methods.fundingPot(i).call()\n        console.log('price ', price)\n        console.log('fundingPot ', fundingPot)\n        // contract에서 데이터를 가져옴\n        collection = [\n          {\n            id: i,\n            title: metadata.properties.name.description,\n            img: metadata.properties.image.description,\n            owner: owner,\n            price: price,\n            fundingPot: fundingPot,\n          },\n          ...collection,\n        ]\n      } catch {\n        console.error('Something went wrong')\n      }\n    }\n    console.log('collection:', collection)\n    dispatchCollectionAction({ type: 'LOADCOLLECTION', collection: collection })\n  }\n\n  // const loadUserFundsHandler = async(contract, account) => {\n  //   const userFunds = await contract.methods.userFunds(account).call();\n  //   dispatchCollectionAction({type: 'LOADFUNDS', userFunds: userFunds});\n  //   return userFunds;\n  // };\n\n  const setNftIsLoadingHandler = (loading) => {\n    dispatchCollectionAction({ type: 'LOADING', loading: loading })\n  }\n\n  const collectionContext = {\n    contract: CollectionState.contract,\n    totalSupply: CollectionState.totalSupply,\n    collection: CollectionState.collection,\n    nftIsLoading: CollectionState.nftIsLoading,\n    loadContract: loadContractHandler,\n    loadTotalSupply: loadTotalSupplyHandler,\n    loadCollection: loadCollectionHandler,\n    setNftIsLoading: setNftIsLoadingHandler,\n  }\n  return (\n    <CollectionContext.Provider value={collectionContext}>\n      {props.children}\n    </CollectionContext.Provider>\n  )\n}\n\nexport default CollectionProvider\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/mina/Desktop/gradient_animated_site/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect } from 'react';\nimport BodyContent from './Components/BodyContent';\nimport MainArea from './Components/MainArea';\nimport web3 from './Connection/web3';\nimport Web3Provider from './Store/Web3Provider';\nimport Web3Context from './Store/web3-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const web3Ctx = useContext(Web3Context); //내가 만든 Contract 추가\n  // const fundingCtx = useContext(FundingContext)\n\n  useEffect(() => {\n    // Check if the user has Metamask active\n    if (!web3) {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n      return;\n    } // Function to fetch all the blockchain data\n\n\n    const loadBlockchainData = async () => {\n      // Request accounts acccess if needed\n      try {\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n      } catch (error) {\n        console.error(error);\n      } // Load account\n\n\n      const accounts = await web3Ctx.loadAccount(web3); // Load Network ID\n\n      const networkId = await web3Ctx.loadNetworkId(web3); // const fundingContract = fundingCtx.loadContract(\n      //   web3,\n      //   MyNFT.abi,\n      //   nftAddress,\n      // )\n      // //mint 버튼이 떠야함 -> main.js에서 MintForm이 떠야하는데 그러려면 아래 작업을 해주어야함\n      // if (fundingContract) {\n      //   console.log('Funding contract deployed to ropsten detwork')\n      //   console.log('fundingContract address', fundingContract) //address 어떻게 찍나?\n      //   let totalSupply = await fundingCtx.loadTotalSupply(fundingContract)\n      //   fundingCtx.setNftIsLoading(false) // 이렇게 호출하는게 맞나?\n      //   fundingCtx.loadCollection(fundingContract, totalSupply)\n      // } else {\n      //   window.alert(\n      //     'NFTMarketplace contract not deployed to detected network.',\n      //   )\n      // }\n      // Metamask Event Subscription - Account changed\n\n      window.ethereum.on('accountsChanged', accounts => {\n        web3Ctx.loadAccount(web3);\n      }); // Metamask Event Subscription - Network changed\n\n      window.ethereum.on('chainChanged', chainId => {\n        window.location.reload();\n      });\n    };\n\n    loadBlockchainData();\n  }, []);\n  const showContent = web3 && web3Ctx.account;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Web3Provider, {\n      children: [showContent && /*#__PURE__*/_jsxDEV(MainArea, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(BodyContent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"rP0uzHEEgxvDyml3ui6CdreaF2c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/mina/Desktop/gradient_animated_site/src/App.js"],"names":["React","useContext","useEffect","BodyContent","MainArea","web3","Web3Provider","Web3Context","App","web3Ctx","window","alert","loadBlockchainData","ethereum","request","method","error","console","accounts","loadAccount","networkId","loadNetworkId","on","chainId","location","reload","showContent","account"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AAEA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AAEA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAMC,OAAO,GAAGR,UAAU,CAACM,WAAD,CAA1B,CADgB,CAEhB;AACA;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAI,CAACG,IAAL,EAAW;AACTK,MAAAA,MAAM,CAACC,KAAP,CACE,qEADF;AAGA;AACD,KAPa,CASd;;;AACA,UAAMC,kBAAkB,GAAG,YAAY;AACrC;AACA,UAAI;AACF,cAAMF,MAAM,CAACG,QAAP,CAAgBC,OAAhB,CAAwB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAxB,CAAN;AACD,OAFD,CAEE,OAAOC,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,OANoC,CAQrC;;;AACA,YAAME,QAAQ,GAAG,MAAMT,OAAO,CAACU,WAAR,CAAoBd,IAApB,CAAvB,CATqC,CAUrC;;AACA,YAAMe,SAAS,GAAG,MAAMX,OAAO,CAACY,aAAR,CAAsBhB,IAAtB,CAAxB,CAXqC,CAarC;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACAK,MAAAA,MAAM,CAACG,QAAP,CAAgBS,EAAhB,CAAmB,iBAAnB,EAAuCJ,QAAD,IAAc;AAClDT,QAAAA,OAAO,CAACU,WAAR,CAAoBd,IAApB;AACD,OAFD,EAlCqC,CAsCrC;;AACAK,MAAAA,MAAM,CAACG,QAAP,CAAgBS,EAAhB,CAAmB,cAAnB,EAAoCC,OAAD,IAAa;AAC9Cb,QAAAA,MAAM,CAACc,QAAP,CAAgBC,MAAhB;AACD,OAFD;AAGD,KA1CD;;AA4CAb,IAAAA,kBAAkB;AACnB,GAvDQ,EAuDN,EAvDM,CAAT;AAwDA,QAAMc,WAAW,GAAGrB,IAAI,IAAII,OAAO,CAACkB,OAApC;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE,QAAC,YAAD;AAAA,iBACGD,WAAW,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cADlB,eAEE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAtED;;GAAMlB,G;;KAAAA,G;AAwEN,eAAeA,GAAf","sourcesContent":["import React, { useContext, useEffect } from 'react'\n\nimport BodyContent from './Components/BodyContent'\nimport MainArea from './Components/MainArea'\n\nimport web3 from './Connection/web3'\nimport Web3Provider from './Store/Web3Provider'\nimport Web3Context from './Store/web3-context'\n\nconst App = () => {\n  const web3Ctx = useContext(Web3Context)\n  //내가 만든 Contract 추가\n  // const fundingCtx = useContext(FundingContext)\n  useEffect(() => {\n    // Check if the user has Metamask active\n    if (!web3) {\n      window.alert(\n        'Non-Ethereum browser detected. You should consider trying MetaMask!',\n      )\n      return\n    }\n\n    // Function to fetch all the blockchain data\n    const loadBlockchainData = async () => {\n      // Request accounts acccess if needed\n      try {\n        await window.ethereum.request({ method: 'eth_requestAccounts' })\n      } catch (error) {\n        console.error(error)\n      }\n\n      // Load account\n      const accounts = await web3Ctx.loadAccount(web3)\n      // Load Network ID\n      const networkId = await web3Ctx.loadNetworkId(web3)\n\n      // const fundingContract = fundingCtx.loadContract(\n      //   web3,\n      //   MyNFT.abi,\n      //   nftAddress,\n      // )\n\n      // //mint 버튼이 떠야함 -> main.js에서 MintForm이 떠야하는데 그러려면 아래 작업을 해주어야함\n      // if (fundingContract) {\n      //   console.log('Funding contract deployed to ropsten detwork')\n\n      //   console.log('fundingContract address', fundingContract) //address 어떻게 찍나?\n      //   let totalSupply = await fundingCtx.loadTotalSupply(fundingContract)\n      //   fundingCtx.setNftIsLoading(false) // 이렇게 호출하는게 맞나?\n      //   fundingCtx.loadCollection(fundingContract, totalSupply)\n      // } else {\n      //   window.alert(\n      //     'NFTMarketplace contract not deployed to detected network.',\n      //   )\n      // }\n\n      // Metamask Event Subscription - Account changed\n      window.ethereum.on('accountsChanged', (accounts) => {\n        web3Ctx.loadAccount(web3)\n      })\n\n      // Metamask Event Subscription - Network changed\n      window.ethereum.on('chainChanged', (chainId) => {\n        window.location.reload()\n      })\n    }\n\n    loadBlockchainData()\n  }, [])\n  const showContent = web3 && web3Ctx.account\n\n  return (\n    <div className=\"App\">\n      <Web3Provider>\n        {showContent && <MainArea />}\n        <BodyContent />\n      </Web3Provider>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}